
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://wkfzhcszhgewkvwukzes.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6IndrZnpoY3N6aGdld2t2d3VremVzIiwicm9sZSI6ImFub24iLCJpYXQiOjE3Mzg3MDE1NzksImV4cCI6MjA1NDI3NzU3OX0.TzSh8M9NOTnsmVaNxquif4xzSxWaVZp9sePHcjrgCVI";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Fetch all products from the database
export async function fetchAllProducts() {
  console.log("Fetching all products...");
  const { data, error } = await supabase
    .from('products')
    .select(`
      *,
      product_images(*)
    `);
  
  if (error) {
    console.error("Error fetching products:", error);
    throw error;
  }
  
  return data || [];
}

// Fetch a single product by ID
export async function fetchProductById(id: string) {
  console.log(`Fetching product with ID: ${id}`);
  const { data, error } = await supabase
    .from('products')
    .select(`
      *,
      product_images(*)
    `)
    .eq('id', id)
    .single();
  
  if (error) {
    console.error(`Error fetching product ${id}:`, error);
    throw error;
  }
  
  return data;
}

// Update a product
export async function updateProduct(id: string, updates: any) {
  console.log(`Updating product ${id} with:`, updates);
  const { data, error } = await supabase
    .from('products')
    .update(updates)
    .eq('id', id)
    .select();
  
  if (error) {
    console.error(`Error updating product ${id}:`, error);
    throw error;
  }
  
  return data;
}

// Update just the product name
export async function updateProductName(id: string, name: string) {
  console.log(`Updating product name for ${id} to: ${name}`);
  const { data, error } = await supabase
    .from('products')
    .update({ name })
    .eq('id', id)
    .select();
  
  if (error) {
    console.error(`Error updating product name for ${id}:`, error);
    throw error;
  }
  
  return data;
}

// Subscribe to real-time changes on the products table
export function subscribeToProductChanges(callback: () => void) {
  console.log("Setting up real-time subscription for products");
  
  const channel = supabase
    .channel('products-channel')
    .on(
      'postgres_changes',
      {
        event: '*', // Listen for all events (INSERT, UPDATE, DELETE)
        schema: 'public',
        table: 'products'
      },
      (payload) => {
        console.log('Real-time update received:', payload);
        callback();
      }
    )
    .subscribe((status) => {
      console.log('Subscription status:', status);
    });
    
  return channel;
}
