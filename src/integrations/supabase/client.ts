
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://wkfzhcszhgewkvwukzes.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6IndrZnpoY3N6aGdld2t2d3VremVzIiwicm9sZSI6ImFub24iLCJpYXQiOjE3Mzg3MDE1NzksImV4cCI6MjA1NDI3NzU3OX0.TzSh8M9NOTnsmVaNxquif4xzSxWaVZp9sePHcjrgCVI";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

/**
 * Fetches all products from the database with their associated images
 * @returns Array of products with their images
 */
export async function fetchAllProducts() {
  // Get all products from the database
  const { data: products, error: productsError } = await supabase
    .from('products')
    .select('*');

  if (productsError) {
    console.error('Error fetching products:', productsError);
    return [];
  }

  // If there are no products, return an empty array
  if (!products || products.length === 0) {
    return [];
  }

  // Get all product images
  const { data: productImages, error: imagesError } = await supabase
    .from('product_images')
    .select('*');

  if (imagesError) {
    console.error('Error fetching product images:', imagesError);
    // Return products without images if there was an error
    return products;
  }

  // Map images to their respective products
  const productsWithImages = products.map(product => {
    const images = productImages?.filter(img => img.product_id === product.id) || [];
    return {
      ...product,
      images
    };
  });

  return productsWithImages;
}
