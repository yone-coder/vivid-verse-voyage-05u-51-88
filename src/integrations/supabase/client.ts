
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://wkfzhcszhgewkvwukzes.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6IndrZnpoY3N6aGdld2t2d3VremVzIiwicm9sZSI6ImFub24iLCJpYXQiOjE3Mzg3MDE1NzksImV4cCI6MjA1NDI3NzU3OX0.TzSh8M9NOTnsmVaNxquif4xzSxWaVZp9sePHcjrgCVI";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Function to fetch all products from Supabase
export const fetchAllProducts = async () => {
  const { data, error } = await supabase
    .from('products')
    .select(`
      *,
      product_images(*)
    `)
    .order('created_at', { ascending: false });
  
  if (error) {
    console.error("Error fetching products:", error);
    throw error;
  }
  
  return data;
};

// Function to fetch a product by ID
export const fetchProductById = async (productId: string) => {
  const { data, error } = await supabase
    .from('products')
    .select('*, product_images(*)')
    .eq('id', productId)
    .single();
    
  if (error) {
    console.error("Error fetching product:", error);
    throw error;
  }
  
  return data;
};

// Function to update a product
export const updateProduct = async (productId: string, updates: Partial<any>) => {
  console.log("Updating product with ID:", productId, "Updates:", updates);
  
  const { data, error } = await supabase
    .from('products')
    .update(updates)
    .eq('id', productId)
    .select();
    
  if (error) {
    console.error("Error updating product:", error);
    throw error;
  }
  
  console.log("Product updated successfully:", data);
  return data;
};

// Function to subscribe to products changes
export const subscribeToProductChanges = (callback: () => void) => {
  console.log("Setting up real-time subscription for products table");
  
  const channel = supabase
    .channel('product-changes')
    .on(
      'postgres_changes',
      { 
        event: '*', 
        schema: 'public', 
        table: 'products' 
      },
      (payload) => {
        console.log('Real-time product update received:', payload);
        callback();
      }
    )
    .subscribe((status) => {
      console.log('Realtime subscription status:', status);
    });
    
  return channel;
};
