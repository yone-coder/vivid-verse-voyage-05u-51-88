
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://wkfzhcszhgewkvwukzes.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6IndrZnpoY3N6aGdld2t2d3VremVzIiwicm9sZSI6ImFub24iLCJpYXQiOjE3Mzg3MDE1NzksImV4cCI6MjA1NDI3NzU3OX0.TzSh8M9NOTnsmVaNxquif4xzSxWaVZp9sePHcjrgCVI";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Product fetch functions
export const fetchAllProducts = async () => {
  const { data, error } = await supabase
    .from('products')
    .select(`
      *,
      product_images (*)
    `)
    .order('created_at', { ascending: false });

  if (error) {
    console.error('Error fetching products:', error);
    throw error;
  }

  return data || [];
};

export const fetchProductById = async (productId: string) => {
  const { data, error } = await supabase
    .from('products')
    .select(`
      *,
      product_images (*)
    `)
    .eq('id', productId)
    .single();

  if (error) {
    console.error(`Error fetching product with ID ${productId}:`, error);
    throw error;
  }

  return data;
};

// Product update functions
export const updateProduct = async (productId: string, updates: any) => {
  const { data, error } = await supabase
    .from('products')
    .update(updates)
    .eq('id', productId)
    .select();

  if (error) {
    console.error('Error updating product:', error);
    throw error;
  }

  return data;
};

export const updateProductName = async (productId: string, newName: string) => {
  console.log(`API call: Updating product ${productId} name to "${newName}"`);
  
  if (!newName || newName.trim() === '') {
    const validationError = new Error('Product name cannot be empty');
    console.error(validationError);
    throw validationError;
  }
  
  try {
    // First fetch the complete product to ensure it exists
    const { data: existingProduct, error: fetchError } = await supabase
      .from('products')
      .select('*')
      .eq('id', productId)
      .single();
    
    if (fetchError) {
      console.error(`Error finding product with ID ${productId}:`, fetchError);
      throw fetchError;
    }
    
    if (!existingProduct) {
      const notFoundError = new Error(`Product with ID ${productId} not found`);
      console.error(notFoundError);
      throw notFoundError;
    }
    
    console.log(`Current product name: "${existingProduct.name}", updating to: "${newName}"`);
    
    // Perform a direct update without using maybeSingle or other fancy methods
    // We'll use a simpler approach and handle the response carefully
    const { error } = await supabase
      .from('products')
      .update({ name: newName })
      .eq('id', productId);

    if (error) {
      console.error('Error updating product name:', error);
      throw error;
    }
    
    // Since we've confirmed the update was successful (no error),
    // we'll return a complete product object based on the existing product
    const updatedProduct = {
      ...existingProduct,
      name: newName,
      updated_at: new Date().toISOString()
    };
    
    console.log('Product name update successful:', updatedProduct);
    return updatedProduct;
    
  } catch (error) {
    console.error('Error in updateProductName:', error);
    throw error;
  }
};

// Real-time subscription function
export const subscribeToProductChanges = (callback: (payload: any) => void) => {
  const channel = supabase
    .channel('product-changes')
    .on(
      'postgres_changes',
      {
        event: '*',
        schema: 'public',
        table: 'products'
      },
      (payload) => {
        callback(payload);
      }
    )
    .subscribe();

  return channel;
};
