
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://wkfzhcszhgewkvwukzes.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6IndrZnpoY3N6aGdld2t2d3VremVzIiwicm9sZSI6ImFub24iLCJpYXQiOjE3Mzg3MDE1NzksImV4cCI6MjA1NDI3NzU3OX0.TzSh8M9NOTnsmVaNxquif4xzSxWaVZp9sePHcjrgCVI";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Add a helper function to fetch product data
export const fetchProductById = async (productId: string) => {
  const { data, error } = await supabase
    .from('products')
    .select(`
      *,
      product_images(*)
    `)
    .eq('id', productId)
    .single();
  
  if (error) {
    console.error('Error fetching product:', error);
    return null;
  }
  
  return data;
};

// Add a helper function to fetch all products
export const fetchAllProducts = async () => {
  const { data, error } = await supabase
    .from('products')
    .select(`
      *,
      product_images(*)
    `);
  
  if (error) {
    console.error('Error fetching products:', error);
    return [];
  }
  
  return data;
};

// Helper function to upload a product image
export const uploadProductImage = async (
  productId: string, 
  file: File, 
  altText: string
) => {
  // Upload file to Supabase Storage
  const fileExt = file.name.split('.').pop();
  const fileName = `${productId}_${Date.now()}.${fileExt}`;
  const filePath = `${fileName}`;

  const { error: uploadError, data } = await supabase.storage
    .from('product-images')
    .upload(filePath, file);

  if (uploadError) {
    throw uploadError;
  }

  // Get the public URL
  const { data: publicUrlData } = supabase.storage
    .from('product-images')
    .getPublicUrl(filePath);

  const imageUrl = publicUrlData.publicUrl;

  // Add entry to product_images table
  const { error: dbError, data: imageData } = await supabase
    .from('product_images')
    .insert({
      product_id: productId,
      src: imageUrl,
      alt: altText
    })
    .select()
    .single();

  if (dbError) {
    throw dbError;
  }

  return imageData;
};

// Helper function to delete a product image
export const deleteProductImage = async (imageId: string, imageUrl: string) => {
  // Extract the filename from the URL
  const url = new URL(imageUrl);
  const pathname = url.pathname;
  const filename = pathname.substring(pathname.lastIndexOf('/') + 1);

  // Delete from product_images table
  const { error: dbError } = await supabase
    .from('product_images')
    .delete()
    .eq('id', imageId);

  if (dbError) {
    throw dbError;
  }

  // Try to delete from storage
  try {
    await supabase.storage
      .from('product-images')
      .remove([filename]);
  } catch (storageError) {
    console.warn('Could not delete from storage:', storageError);
    // Continue even if storage deletion fails
  }

  return true;
};

// Helper function to update a product image's metadata
export const updateProductImage = async (imageId: string, updates: { alt?: string }) => {
  const { error, data } = await supabase
    .from('product_images')
    .update(updates)
    .eq('id', imageId)
    .select()
    .single();

  if (error) {
    throw error;
  }

  return data;
};
