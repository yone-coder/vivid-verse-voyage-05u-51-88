
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://wkfzhcszhgewkvwukzes.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6IndrZnpoY3N6aGdld2t2d3VremVzIiwicm9sZSI6ImFub24iLCJpYXQiOjE3Mzg3MDE1NzksImV4cCI6MjA1NDI3NzU3OX0.TzSh8M9NOTnsmVaNxquif4xzSxWaVZp9sePHcjrgCVI";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Product fetch functions
export const fetchAllProducts = async () => {
  const { data, error } = await supabase
    .from('products')
    .select(`
      *,
      product_images (*)
    `)
    .order('created_at', { ascending: false });

  if (error) {
    console.error('Error fetching products:', error);
    throw error;
  }

  return data || [];
};

export const fetchProductById = async (productId: string) => {
  const { data, error } = await supabase
    .from('products')
    .select(`
      *,
      product_images (*)
    `)
    .eq('id', productId)
    .single();

  if (error) {
    console.error(`Error fetching product with ID ${productId}:`, error);
    throw error;
  }

  return data;
};

// Product update functions
export const updateProduct = async (productId: string, updates: any) => {
  const { data, error } = await supabase
    .from('products')
    .update(updates)
    .eq('id', productId)
    .select(`
      *,
      product_images (*)
    `);

  if (error) {
    console.error('Error updating product:', error);
    throw error;
  }

  return data;
};

export const updateProductName = async (productId: string, newName: string) => {
  console.log(`API call: Updating product ${productId} name to "${newName}"`);
  
  // Validate input first
  if (!newName || newName.trim() === '') {
    const validationError = new Error('Product name cannot be empty');
    console.error(validationError);
    throw validationError;
  }
  
  try {
    // First check if the product exists before attempting to update
    const { data: existingProduct, error: existingError } = await supabase
      .from('products')
      .select('id')
      .eq('id', productId)
      .single();
    
    if (existingError) {
      console.error('Error checking if product exists:', existingError);
      throw existingError;
    }
    
    // If we get here, the product exists - proceed with update
    // Using .single() was causing problems, switch to regular selection
    const { data, error } = await supabase
      .from('products')
      .update({ name: newName })
      .eq('id', productId)
      .select();
    
    if (error) {
      console.error('Error updating product name:', error);
      throw error;
    }
    
    // Make sure we got data back
    if (!data || data.length === 0) {
      const updateError = new Error(`No data returned after update for product ID ${productId}`);
      console.error(updateError);
      throw updateError;
    }
    
    console.log('Basic product update successful:', data[0]);
    
    // Fetch the complete product with images
    return await fetchProductById(productId);
    
  } catch (error) {
    console.error('Error in updateProductName:', error);
    throw error;
  }
};

// Real-time subscription function
export const subscribeToProductChanges = (callback: (payload: any) => void) => {
  // Create a channel for listening to product changes
  const productChannel = supabase
    .channel('product-changes')
    .on(
      'postgres_changes',
      {
        event: '*',
        schema: 'public',
        table: 'products'
      },
      (payload) => {
        callback(payload);
      }
    )
    .subscribe();

  // Create a channel for listening to product image changes
  const imagesChannel = supabase
    .channel('product-images-changes')
    .on(
      'postgres_changes',
      {
        event: '*',
        schema: 'public',
        table: 'product_images'
      },
      (payload) => {
        // When a product image changes, we should trigger a refresh of the products
        callback(payload);
      }
    )
    .subscribe();

  // Return a cleanup function that properly removes both channels
  return () => {
    supabase.removeChannel(productChannel);
    supabase.removeChannel(imagesChannel);
  };
};
